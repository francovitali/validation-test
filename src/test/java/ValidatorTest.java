import model.Employee;
import model.Person;
import org.junit.BeforeClass;
import org.junit.Test;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import java.util.Set;

import static org.junit.Assert.*;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'fvitali' at '1/3/17 10:04 AM' with Gradle 3.2.1
 *
 * @author fvitali, @date 1/3/17 10:04 AM
 */
public class ValidatorTest {
	private static Validator validator;

	@BeforeClass
	public static void setUp() {
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		validator = factory.getValidator();
	}

	@Test
	public void testValidation_WithValidModel_ShouldHaveNoErrors() {
		Person person = new Person();
		person.id = 1;
		person.name = "Franco";
		person.age = 35;

		Set<ConstraintViolation<Person>> constraintViolations = validator.validate(person);

		assertTrue(constraintViolations.isEmpty());
	}

	@Test
	public void testValidation_WithNotNullMissingField_ShouldHaveErrors() {
		Person person = new Person();
		person.id = 1;
		//person.name = "Franco";
		person.age = 35;

		Set<ConstraintViolation<Person>> constraintViolations = validator.validate(person);

		assertFalse(constraintViolations.isEmpty());
	}

	@Test
	public void testValidation_WithMinOverflowField_ShouldHaveErrors() {
		Person person = new Person();
		person.id = 1;
		person.name = "Franco";
		person.age = 10;

		Set<ConstraintViolation<Person>> constraintViolations = validator.validate(person);

		assertFalse(constraintViolations.isEmpty());
	}

	@Test
	public void testValidation_WithExtendedModel_ShouldHaveNoErrors() {
		Employee person = new Employee();
		person.id = 1;
		person.name = "Franco";
		person.age = 35;
		person.departmentId = "some";

		Set<ConstraintViolation<Person>> constraintViolations = validator.validate(person);

		assertTrue(constraintViolations.isEmpty());
	}

	@Test
	public void testValidation_WithExtendedInvalidModel_ShouldHaveErrors() {
		Employee person = new Employee();
		person.id = 1;
		person.name = "Franco";
		person.age = 10;
		//person.departmentId = "some";

		Set<ConstraintViolation<Person>> constraintViolations = validator.validate(person);

		assertFalse(constraintViolations.isEmpty());
	}
}
